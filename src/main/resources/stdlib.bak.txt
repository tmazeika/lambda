; Lambdas
(define identity (lambda (x) x))
(define Y (lambda (f) ((lambda (x) (x x)) (lambda (x) (f (x x))))))

; Booleans
(define #t (lambda (x y) x))
(define #f (lambda (x y) y))
(define if (lambda (c t e) (c t e)))
(define or (lambda (a b) (a a b)))
(define and (lambda (a b) (a b a)))
(define not (lambda (a x y) (a y x)))

; Misc
(define add1 (lambda (n) (lambda (f x) (f (n f x)))))

; Lists
(define cons (lambda (x y s) (s x y)))
(define car (lambda (x) (x #t)))
(define cdr (lambda (x) (x #f)))
(define list-ref (lambda (l n) (car (n cdr l))))
(define null (lambda (s) #t))
(define null? (lambda (x) (x (lambda (x y) #f))))
(define length (Y (lambda (length) (lambda (l) (if (null? l) 0 (add1 (length (cdr l))))))))

(define inccons (lambda (p) (cons (cdr p) (add1 (cdr p)))))
(define sub1 (lambda (n) (car (n inccons (cons 0 0)))))

; Naturals
(define 0 (lambda (f x) x))
(define 1 (add1 0))
(define 2 (add1 1))
(define 3 (add1 2))
(define 4 (add1 3))
(define 5 (add1 4))
(define 6 (add1 5))
(define 7 (add1 6))
(define 8 (add1 7))
(define 9 (add1 8))
(define 10 (add1 9))
(define 11 (add1 10))
(define 12 (add1 11))
(define 13 (add1 12))
(define 14 (add1 13))
(define 15 (add1 14))
(define 16 (add1 15))
(define 17 (add1 16))
(define 18 (add1 17))
(define 19 (add1 18))
(define 20 (add1 19))
(define 21 (add1 20))
(define 22 (add1 21))
(define 23 (add1 22))
(define 24 (add1 23))
(define 25 (add1 24))
(define 26 (add1 25))

(define zero? (lambda (n) (n (lambda (x) #f) #t)))
(define + (lambda (m n) (lambda (f x) (m f (n f x)))))
(define - (lambda (a b) (b sub1 a)))
(define * (lambda (m n) (lambda (f) (m (n f)))))
(define ^ (lambda (m n) (n (* m) 1)))

; Fun!
(define fact (Y (lambda (fact) (lambda (x) (if (zero? x) 1 (* x (fact (sub1 x))))))))
(define fib (Y (lambda (fib) (lambda (x) (if (or (zero? x) (zero? (sub1 x))) 1 (+ (fib (- x 1)) (fib (- x 2))))))))
